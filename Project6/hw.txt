Brendon Ng
304-925-492
UCLA CS 31 Lec 1 Dis 1A
Prof. Smallberg

Project 6 - What's the Point?


Problem 1)
A)
Bug in line "*ptr + 1 = 20;" - needs parentheses, we need to follow the pointer of (ptr+1), we cannot add one after following the pointer ptr.
Big with the while loop - Currently, with these bugs, the program starts at element 2 of the array, moves to element 1 before printing, then prints element 1, 0, then exhibits undefined behavior. 
The while loop starts at the end of the array and increments backwards, we need to set ptr to point to the first element in the array before starting the loop.
We should change "ptr--;" to "ptr++;" and move it to after the the cout! When the loop starts, ptr should point to element 0 in the array, print the element THEN change ptr to the next element. 
Also, the while loop should run under the condition that ptr is less than the third element in the array (arr + 3). 


Fixed version:
int main()
{
	int arr[3] = { 5, 10, 15 };
	int* ptr = arr;
    
	*ptr = 30;          // set arr[0] to 30
	*(ptr + 1) = 20;      // set arr[1] to 20
	ptr += 2;
	*ptr = 10;        // set arr[2] to 10
    
	ptr = arr;
	while (ptr <= arr + 3)
	{
		cout << *ptr << endl;    // print values
		ptr++;
	}
}

B)
The pointer pToMax is passed into the findMax function by value so the pointer ptr from the main routine remains unchanged. To fix this, we should pass a reference to the pointer - the third parameter should be int*& pToMax

Fixed version:
void findMax(int arr[], int n, int*& pToMax)
{
        if (n <= 0)
        return;      // no items, no maximum!
    
    	pToMax = arr;
    
    	for (int i = 1; i < n; i++)
    	{
        	if (arr[i] > *pToMax)
        		pToMax = arr + i;
    	}
} 

C)
The problem is that the pointer is not initialized before being passed into the function. We can fix this by initializing the pointer to pass to a reference to an integer variable
In the main, we need to declare an integer first, and pass a reference to that integer to the function computeCube.

Fixed version:
int main()
{
	int x;
	int* ptr = &x
	computeCube(5, ptr);
	cout << "Five cubed is " << ptr << endl;
}

D)
You cannot compare pointers with a != operator, you need to compare the values that those pointers point to.
Also, str1 and str2 will never equal zero, the condition on the while loop needs to check if the value str1 and str2 are pointing to are null bytes. The return value also should use the values that the pointers point to as well, we need to use *'s (follow the pointer).

bool strequal(const char str1[], const char str2[])
{
	while (*str1 != 0  &&  str2 != 0)
        {
		if (*str1 != *str2)  // compare corresponding characters
			return false;
		str1++;            // advance to the next character
		str2++;
        }
        return *str1 == *str2;   // both ended at same time?
}

E)
We are trying to point to an array that is defined within a function, not within the main method. The scope of the array is only within that function so the main routine fails to access it.


Problem 2)
A) double* cat;
B) double mouse[5];
C) cat = &mouse[4];
D) *cat = 25;
E) *(mouse + 3) = 42;
F) cat -= 3;
G) cat[1] = 27;
H) cat[0] = 54;
I) bool b = (*cat == *(cat+1));
J) bool d = (cat == mouse);


Problem 3)
A)
double mean(const double* scores, int numScores)
{
        double tot = 0;
        for(int i = 0; i < numScores; i++)
        {
            tot += *(scores + i);
        }
        return tot/numScores;
}

B)
const char* findTheChar(const char str[], char chr)
{
        for (int k = 0; *(str + k) != 0; k++)
            if (*(str + k) == chr)
                return (str + k);

        return nullptr;
}

C)
const char* findTheChar(const char str[], char chr)
{
	while(*str != 0)
	{
		if (*str == chr)
                	return str;
		str++;
	}

        return nullptr;
}


Problem 4)
3  // Prints the integer 3 because we have a pointer minus a pointer. A pointer to the 6th element in the array minus ptr which at this point is a reference to the 3rd element in the array because of the "ptr += 2" statement. 
4
79
-1
9
22
19
Step by Step: 
the maxwell function assigns a pointer to the beginning of the array to ptr, the value at the first element in the array is set to -1, then ptr is incremented by two, pointing now at array[2], assigning 9 to ptr[1] assigns 9 to array[3], then 79 is assigned to the element at (array + 1) which is array[1]. 
The program prints out a 3 because a pointer minus a pointer is the integer difference, it prints the pointer to the 6th element minus ptr which points to the third element.
Then, swap1 does not change anything in the main routine as the pointers are passed by value and are only modified within the scope of the swap1 function.
Then swap2 swaps the values of array[0] and array[2], giving us a final array of {4, 79, -1, 9, 22, 19}.


Problem 5)

void removeS(char* cstring)
{
	if(*cstring == '\0')
		return;	
	
	char* inspect = &*cstring;

	while(*inspect != 0)
	{
		if(*inspect == 's' || *inspect == 'S')
		{
			inspect++;
			continue;
		}

		*cstring = *inspect;
		cstring++;
		inspect++;
	}
	*cstring = '\0';
}



