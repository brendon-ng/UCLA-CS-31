Brendon Ng
304-925-492
UCLA CS 31 Lec 1 Dis 1A
Prof. Smallberg

Report - Programming Assignment 3: House Party

1. Getting numbers in character form to translate into integer form was difficult as I got the encoding when I tried something like "int int = pollData[i];" The page on the class website about strings and integers helped a lot in this aspect. Also, thinking and drafting up a way to iterate through the string to check if it was the correct format while not going out of bounds was difficult. I ended up iterating through the individual characters and checking backwards to see if the letter or digit was in an invalid spot.

2. 
For the hasProperSyntax() function, I chose to break it up into checking each individual state forecast with another method called isProperStateForecast(). I iterated through the pollData string–if any character was ever not a digit or letter, the function returned false–adding each character to a temporary string until it reached a comma, then setting the previously built string to the isProperStateForecast() function.

hasProperSyntax(string pollData)
	Iterate through every char in string:
		if the current char is not a letter or digit:
			return false
		if the current char is a comma, check if the previously built stateForecast string is a valid one using isProperStateForecast()
			if no, return false
		else (if the current char is not a comma)
			add the current char to the end of stateForecast string
	end loop
	return result of final stateForecast string left over from the loop.
end function

isProperStateForecast(string stateForecast)
	if stateForecast is empty string return true
	if stateForecast has length of 1 return false
	check if the first two chars (capitalized) are a valid state code with isValidUppercaseStateCode() - return false if not
	iterate through each char in the rest of the stateForecast
		if the current char is a digit it must not be the last char in the string or the third digit in a row
		if the current char is a letter it must not be the second in a row
		if the current char is anything but a letter or digit return false
	if it makes it through all these tests its a valid string return true
End function

For tallySeats() function, I iterated through the string until finding a letter that matches the party letter (making sure that it isn't part of a state code) and I checked the previous two characters before that and extracted whatever numerical value from that and added it to the seatTally variable.

tallySeats(string pollData, char party, int& seatTally)
	if the pollData doesn't have proper syntax return 1
	if the party is not a letter return 2
	for every char in pollData (starting at index 2 because the first two are part of a state code)
		if the current char matches the party letter make sure it's not part of a state code and add the value of the preceding digits to seatTally variable.
	return 0
End function


3. Test Cases
Tests that were examples in the spec:
	tallySeats("CT5D,NY9R17D1I,VT,ne3r00D", 'd', seats) - was an example of a valid syntax
	tallySeats("KS4R, NV3D1R", 'd', seats)  - was an example of an invalid syntax
	tallySeats("", 'd', seats) - empty string should return 0 and 0
	tallySeats("NY9R17D1I,VT,NJ3D5R4D,KS4R", 'd', seats) - example in spec should return 24
	tallySeats("NY9R17D1I,VT,NJ3D5R4D,KS4R", 'R', seats) - example in spec should return 18
	tallySeats("NY9R17D1I,VT,NJ3D5R4D,KS4R", 'i', seats) - example in spec should return 1

Assert Tests from spec examples on how to use assert():
	assert(hasProperSyntax("CT5D,NY9R17D1I,VT,ne3r00D"));
    	assert(!hasProperSyntax("ZT5D,NY9R17D1I,VT,ne3r00D"));
    	seats = 0;
    	seats = -999;    // so we can detect whether tallySeats sets seats
    	assert(tallySeats("CT5D,NY9R17D1I,VT,ne3r00D", 'd', seats) == 0  &&  seats == 22);
    	seats = -999;    // so we can detect whether tallySeats sets seats
    	assert(tallySeats("CT5D,NY9R17D1I,VT,ne3r00D", '%', seats) == 2  &&  seats == -999);
	
	These were taken straight out of the spec so it my code better have passed them.

Other Test Cases:
	tallySeats("CA4s53j3d32i53D", 'd', seats) - valid syntax, multiple instances of the same party within a state
	tallySeats("CA4s53j3d32i53dD", 'd', seats) - invalid syntax, double letter at the end
	tallySeats("CA4s73j3d32i53D", 'j', seats) - checking for party 'j' instead of 'd'
	tallySeats("CA4s53j3d32i53D", '9', seats) - party not a letter
	tallySeats("CA4s53j3d32i53D,MT83d2g24l2j,VT42y00d13k,NY,HI32k", 'd', seats) - checking performance with valid string with multiple state forecasts
	tallySeats("CA4s53j3d32i53D,MT83d2c24l2j,VT42y00d13k,NY,HI32T", 'T', seats) - party letter is a part of a state code
	tallySeats("CA4s53j3d32i53D,MT83m2c24l2j,VT42y00d13m,NY,HI32T", 'm', seats) - party letter part of a state code at the beginning
	tallySeats("CA4s53j3d32i53D,MT83m2CA24l2j,VT42y00d13m,NY,HI32T", 'm', seats) - invalid syntax, state code in the middle without a comma



